---
import Code from "@/components/code.astro";

interface Props {
  className?: string;
}

const { className } = Astro.props;

const wagmiConfigCode = `import { type Config, createConfig, http } from "wagmi";
import { base, mainnet } from "wagmi/chains";
import { injected, metaMask, safe, walletConnect } from "wagmi/connectors";

export const WAGMI_CONFIG: Config = createConfig({
	chains: [mainnet, base],
	connectors: [
		injected(),
		walletConnect({ projectId: "YOUR_PROJECT_ID" }),
		metaMask(),
		safe(),
	],
	transports: {
		[mainnet.id]: http(),
		[base.id]: http(),
	},
});`;

const queryClientCode = `import { QueryClient } from "@tanstack/react-query"

const queryClient = new QueryClient();

export function Providers({ children }: { children: React.ReactNode }) {
	return (
		<WagmiProvider config={WAGMI_CONFIG}>
          <QueryClientProvider client={queryClient}>
            {children}
          </QueryClientProvider>
		</WagmiProvider>
	);
}`;

const indexTsxExample = `import React from "react";
import ReactDOM from "react-dom/client";
import { Providers } from "./providers";
import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <Providers>
      <App />
    </Providers>
  </React.StrictMode>
);`;

const headerTsxExample = `<header className="flex items-center justify-between p-4">
  <h1 className="text-2xl font-bold">My DApp</h1>
  <ConnectWallet />
</header>`;
---

<div class={className}>
  <h1 class="text-2xl">Ejemplo Básico</h1>

  <span>
    En un entorno donde el proyecto ya tiene shadcn y los respectivos
    componentes necesarios, además que cuente ya con wagmi & viem instalados el
    proceso de integrar el componente a su proyecto puede ser de la forma en la
    que se le explicará a continuación.

    <br />
    <br />

    En lugar de usar el ejemplo que se muestra a continuación, usted puede
    seguir los pasos que dicta la documentación oficial de wagmi. Aquí solo
    tratamos de simplificar el proceso dedicado a el componente en cuestión.
    <br />

    <a href="https://wagmi.sh/react/getting-started">
      https://wagmi.sh/react/getting-started
    </a>
  </span>

  <h2 class="text-xl font-medium mt-4">Configuración</h2>

  <span>
    El primer paso es configurar **wagmi**. Si planeas utilizar WalletConnect,
    necesitarás un **projectId** que puedes obtener en (WalletConnect
    Cloud)[https://cloud.walletconnect.com].
  </span>

  <div class="h-1"></div>

  <Code title="providers.tsx" code={wagmiConfigCode} />

  <div class="h-2"></div>

  <span>
    Luego, configura QueryClient y crea un componente Providers que envuelva tu
    aplicación. Esto proporcionará el contexto necesario para wagmi y
    react-query.
  </span>

  <div class="h-1"></div>

  <Code title="providers.tsx" code={queryClientCode} />

  <div class="h-2"></div>

  <span>
    Envuelve tu aplicación de React con el componente **Providers** que creaste.
    Si utilizas Storybook, recuerda hacer lo mismo en tu archivo de
    configuración, como **.storybook/preview.tsx**, para asegurar que los
    componentes tengan acceso al contexto de **wagmi**.
  </span>

  <div class="h-1"></div>

  <Code title="index.tsx" code={indexTsxExample} />

  <div class="h-2"></div>

  <span>
    Una vez completada la configuración, puedes integrar el componente
    **ConnectWallet** en cualquier parte de tu aplicación para gestionar la
    conexión de la billetera.
  </span>

  <div class="h-1"></div>

  <Code title="header.tsx" code={headerTsxExample} />
</div>
